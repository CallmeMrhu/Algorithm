


做前++和后++效率区别也很大：
    从后加的实现方式可以知道，对象利用自己创建一个临时对象（自己在函数调用的一个复制），
    然后改变自己的状态，并返回这个临时对象，
    而前加的实现方式时，直接改变自己的内部状态，并返回自己的引用。
    以后尽量用前加

在binary search中：
    计算middle时，一般我们写成 middle = (right + left)/2，但是这种方式在right和left都比较大的时候，会超过int范围，
    改写成 middle = left + (right - left)/2，采用减法就可以避免这种问题的出现。

堆与自由存储区并不等价：
从技术上来说，堆（heap）是C语言和操作系统的术语。堆是操作系统所维护的一块特殊内存，它提供了动态分配的功能，
当运行程序调用malloc()时就会从中分配，稍后调用free可把内存交还。而自由存储是C++中通过new和delete动态分配和释放对象的抽象概念，
通过new来申请的内存区域可称为自由存储区。基本上，所有的C++编译器默认使用堆来实现自由存储，也即是缺省的全局运算符
new和delete也许会按照malloc和free的方式来被实现，这时藉由new运算符分配的对象，说它在堆上也对，说它在自由存储区上也正确。
但程序员也可以通过重载操作符，改用其他内存来实现自由存储，例如全局变量做的对象池，这时自由存储区就区别于堆了。我们所需要记住的就是：
    堆是操作系统维护的一块内存，而自由存储是C++中通过new与delete动态分配和释放对象的抽象概念。堆与自由存储区并不等价。