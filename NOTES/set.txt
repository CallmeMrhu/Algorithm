
// c++中set使用积累

set是关联式容器，是用来存储同一数据类型的数据类型，并且能从一个数据集合中取出数据，
set中的每个元素都是唯一，系统根据元素的值自动排序(从小到大)，注意set中元素的值不能被改变，python中元组的值也不能被改变
头文件 #include <set>
声明 set<int> name;

插入数据                          setname.insert(number);
返回set容器的第一个元素             setname.begin()
返回set容器的最后一个元素的下一个    setname.end()
删除set容器中的所有的元素           setname.clear()
判断set容器是否为空                setname.empty() 　
返回set容器可能包含的元素最大个数    setname.max_size() 　
返回当前set容器中的元素个数          setname.size()
返回set反方向迭代器的第一个元素      setname.rbegin()
判断某个值是否出现过                setname.count()
⚠️ 在使用的过程中发现，以上返回的是地址执政而不是具体的值，*setname.end()才是具体的值
特别注意set.end()这个方法，是最后一个的下一个位置，所以在使用迭代器进行遍历的时候，写it!=setname.end();
网上有的blog写错了，写成最后一个数字了，其实有点想数组中使用数组大小作为索引值，数组会越界，而这里end()用来做循环终止条件。

迭代器iterator的使用方法和vector的一样
    set<int>::iterator it; for(it=setname.begin();it!=setname.end();it++){...cout<<*it<<endl;...}

删除set中的最后一个元素:
    set<int>::iterator index = setname.end();
    int number = setname.erase(--index);
    // 而不是 setname.erase(setname.end());

获取set的最后一个元素：
                    (1) set<int>::iterator index = setname.end();
                        int number = *(--index);
                    (2) int number = setname.rbegin();

set为无序不重复元素集合
    这里的无序指的是set不会记录元素的插入点和位置，即set不能使用index来获取值操作，只能使用迭代器获取值。

set对vector进行去重操作：
    set<int> s_name(vec_name.begin(), vec_name.end());